{
    "version": "v0.1.0",
    "scopeName": "source.rhai",
    "information_for_contributors": [
        "aster: galaster@foxmail.com"
    ],
    "keyEquivalent": "^~H",
    "patterns": [
        {
            "include": "#comment"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.rhai",
                    "begin": "(%%%)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.block.rhai"
                        }
                    },
                    "end": "(%%%)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.block.rhai"
                        }
                    },
                    "patterns": [
                        {
                            "include": "text.html.markdown"
                        }
                    ]
                },
                {
                    "name": "comment.line.rhai",
                    "match": "(%).*$\\n?",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.line.rhai"
                        }
                    }
                },
                {
                    "name": "comment.block.html",
                    "begin": "<!--",
                    "end": "--\\s*>"
                },
                {
                    "name": "comment.block.html",
                    "begin": "<?",
                    "end": "?>"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "\\b(using|macro|as|with|type|external|extending|where)\\b",
                    "name": "keyword.control.definition.rhai"
                },
                {
                    "match": "\\b(switch|match|case)\\b",
                    "name": "keyword.control.flow.rhai"
                },
                {
                    "match": "\\b(do|while|loop|return|yield|break|pass)\\b",
                    "name": "keyword.control.loop.rhai"
                },
                {
                    "match": "\\b(this|super)\\b",
                    "name": "keyword.control.context.rhai"
                },
                {
                    "begin": "\\b(for)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.loop.rhai"
                        }
                    },
                    "end": "\\b(in)\\b",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.control.loop.rhai"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#literals"
                        }
                    ]
                },
                {
                    "match": "\\b(is|not|or|and|in)\\b",
                    "name": "keyword.operator.comparison.rhai"
                },
                {
                    "match": "\\b(true|false)\\b",
                    "name": "keyword.control.rhai"
                },
                {
                    "match": "\\b(null)\\b",
                    "name": "constant.language.null.rhai"
                }
            ]
        },
        "statements": {
            "patterns": [
                {
                    "include": "#let"
                },
                {
                    "include": "#def"
                },
                {
                    "include": "#block"
                },
                {
                    "include": "#if"
                }
            ]
        },
        "let": {
            "begin": "\\b(let)\\b",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.let.rhai"
                }
            },
            "end": "([_0-9a-zA-Z]+)\\s*[;=]|[{]",
            "endCaptures": {
                "1": {
                    "name": "entity.name.function.rhai"
                }
            },
            "patterns": [
                {
                    "match": "([_0-9a-zA-Z]+)",
                    "name": "storage.modifier.rhai"
                }
            ]
        },
        "def": {
            "begin": "\\b(def)\\b",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.let.rhai"
                }
            },
            "end": "([_0-9a-zA-Z]+)\\s*[(]",
            "endCaptures": {
                "1": {
                    "name": "entity.name.function.rhai"
                }
            },
            "patterns": [
                {
                    "match": "([_0-9a-zA-Z]+)",
                    "name": "storage.modifier.rhai"
                }
            ]
        },
        "if": {
            "begin": "\\b(if|ef|else(?:\\s*if)?)\\b([^{]*)(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.block.rhai"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#literals"
                        }
                    ]
                },
                "3": {
                    "name": "punctuation.definition.block.begin.rhai"
                }
            },
            "end": "(\\})",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.block.end.rhai"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#html"
                },
                {
                    "include": "#statements"
                },
                {
                    "include": "#literals"
                }
            ]
        },
        "block": {
            "begin": "\\b(block|extends)\\b\\s*([_0-9a-zA-Z]+)\\s*(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.extends.rhai"
                },
                "2": {
                    "name": "entity.name.type.extends.rhai"
                },
                "3": {
                    "name": "punctuation.section.embedded.begin.rhai"
                }
            },
            "end": "(\\})",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.embedded.end.rhai"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "\\b(===?|=!=|<=|>=|<>)\\b",
                    "name": "keyword.operator.comparison.rhai"
                },
                {
                    "match": "\\b(-|\\+|\\*|\\/|\\^)\\b",
                    "name": "keyword.operator.arithmetic.rhai"
                },
                {
                    "match": "\\b(\\?=|:=|=)\\b",
                    "name": "keyword.operator.assignment.rhai"
                },
                {
                    "match": "\\b(∈|<:|:>|<-|->|:?)\\b",
                    "name": "keyword.operator.set.rhai"
                },
                {
                    "match": "\\b(<|>)\\b",
                    "name": "keyword.operator.comparison.rhai"
                },
                {
                    "match": "\\b(!|¬)\\b",
                    "name": "keyword.operator.infix.rhai"
                },
                {
                    "match": "\\b(\\?|°)\\b",
                    "name": "keyword.operator.logical.rhai"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#key"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#call"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#symbol"
                }
            ]
        },
        "number": {
            "patterns": [
                {
                    "match": "(?<!\\w)(0x[0-9a-fA-F]+)(_[A-Za-z][A-Za-z0-9_]*)?(?!\\w)",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.hex.rhai"
                        },
                        "2": {
                            "name": "keyword.control.handler.byte.rhai"
                        }
                    }
                },
                {
                    "match": "(?<!\\w)(0o[0-7]+)(_[A-Za-z][A-Za-z0-9_]*)?(?!\\w)",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.oct.rhai"
                        },
                        "2": {
                            "name": "keyword.control.handler.byte.rhai"
                        }
                    }
                },
                {
                    "match": "(?<!\\w)(0b[01]+)(_[A-Za-z][A-Za-z0-9_]*)?(?!\\w)",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.bin.rhai"
                        },
                        "2": {
                            "name": "keyword.control.handler.byte.rhai"
                        }
                    }
                },
                {
                    "match": "([\\+\\-]?(0|([1-9](([0-9]|_[0-9])+)?))(?:(?:\\.(0|([1-9](([0-9]|_[0-9])+)?)))?\\*\\*[\\+\\-]?[1-9]_?[0-9]*|(?:\\.[0-9_]*)))",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.decimal.rhai"
                        }
                    }
                },
                {
                    "match": "([\\+\\-]?(0|[1-9][0-9]*))",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.integer.rhai"
                        }
                    }
                },
                {
                    "match": "(¯|¨)",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.control.rhai"
                        }
                    }
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "string.quoted.block.rhai",
                    "begin": "([A-Za-z_][A-Za-z0-9_]*)?\\s*(''')",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.handler.string.rhai"
                        },
                        "2": {
                            "name": "punctuation.definition.string.block.rhai"
                        }
                    },
                    "end": "(''')",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.block.rhai"
                        }
                    }
                },
                {
                    "name": "string.quoted.block.rhai",
                    "begin": "([A-Za-z_][A-Za-z0-9_]*)?\\s*(\"\"\")",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.handler.string.rhai"
                        },
                        "2": {
                            "name": "punctuation.definition.string.block.rhai"
                        }
                    },
                    "end": "(\"\"\")",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.block.rhai"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\\\([btnfr\"\\\\\\n/]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})",
                            "name": "constant.character.escape.rhai"
                        },
                        {
                            "match": "\\\\[^btnfr/\"\\\\\\n]",
                            "name": "invalid.illegal.escape.rhai"
                        }
                    ]
                },
                {
                    "match": "([A-Za-z_][A-Za-z0-9_]*)?\\s*(\\'[^'\\\\]*(?:\\\\.[^'\\\\]*)*\\')",
                    "captures": {
                        "1": {
                            "name": "keyword.control.handler.string.rhai"
                        },
                        "2": {
                            "name": "string.quoted.single.rhai"
                        }
                    }
                },
                {
                    "match": "([A-Za-z_][A-Za-z0-9_]*)?\\s*(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")",
                    "captures": {
                        "1": {
                            "name": "keyword.control.handler.string.rhai"
                        },
                        "2": {
                            "name": "string.quoted.single.rhai"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\\\([btnfr\"\\\\\\n/]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})",
                            "name": "constant.character.escape.rhai"
                        },
                        {
                            "match": "\\\\[^btnfr/\"\\\\\\n]",
                            "name": "invalid.illegal.escape.rhai"
                        }
                    ]
                },
                {
                    "match": "(&[a-zA-Z]+;)|(&#[0-9]+;)",
                    "name": "constant.character.escape.rhai"
                }
            ]
        },
        "symbol": {
            "patterns": [
                {
                    "match": "\\b([_a-zA-Z][_0-9a-zA-Z]*)\\b",
                    "name": "meta.function-call.generic.python"
                },
                {
                    "match": "\\b(::)\\b",
                    "name": "entity.name.function.namespace.rhai"
                }
            ]
        },
        "call": {
            "patterns": [
                {
                    "begin": "([A-Za-z_][A-Za-z0-9_]*)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.structure.any.rhai"
                        },
                        "2": {
                            "name": "punctuation.definition.tag.begin.rhai"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.rhai"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#literals"
                        }
                    ]
                }
            ]
        },
        "key": {
            "patterns": [
                {
                    "match": "\\b([a-zA-Z][_0-9a-zA-Z]*)\\b\\s*(=)",
                    "captures": {
                        "1": {
                            "name": "constant.language.key.rhai"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.rhai"
                        }
                    }
                }
            ]
        }
    }
}
